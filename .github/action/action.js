!function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=12)}([function(e,t){e.exports=require("@actions/core")},function(e,t){e.exports=require("@actions/github")},function(e,t){e.exports=require("fs-extra")},function(e,t){e.exports=require("bluebird")},function(e,t){e.exports=require("@actions/artifact")},function(e){e.exports=JSON.parse('{"name":"orange","productName":"Orange","version":"0.0.0-see-the-releases-page-on-github","description":"Bitcoin blockchain explorer for Bitcoin Core","license":"Unlicense","main":"main/main.js","engines":{"node":"^12.0.0","npm":"^6.0.0"},"scripts":{"build:prod:main":"cross-env NODE_ENV=production npm run _webpack-build-main","build:prod:renderer":"cross-env NODE_ENV=production npm run _webpack-build-renderer","build":"run-s _rimraf-artifacts _build","build-action":"cross-env NODE_ENV=production TS_NODE_PROJECT=\'webpack/tsconfig.json\' webpack --config webpack/webpack.action.config.ts","generate-workflows":"node .github/generateWorkflows/generateWorkflows.js","check:coverage":"npm run _test-with-coverage","check:lint":"eslint \'**/*.{ts,tsx,js}\'","check:npm-audit":"npm audit","check:typescript":"npm run _typescript","check:depcheck":"depcheck","check":"run-p --aggregate-output -cln check:*","create-executable":"cross-env FILENAME=createExecutable run-s build-action _create-executable","develop:main":"cross-env NODE_ENV=development run-s _webpack-build-main _electron","develop:renderer":"cross-env NODE_ENV=development run-p -ln _webpack-server \'_typescript -- -w\'","trigger-release":"node scripts/triggerRelease.js","see-coverage":"run-s --continue-on-error --silent \'_test-with-coverage -- --coverageThreshold={}\' _open-coverage-results","test":"jest","_build":"run-p --aggregate-output -cln build:*:*","_create-executable":"node .github/action/createExecutable.js && rimraf .github/action/createExecutable.js","_electron":"electron ./artifacts/webpack","_open-coverage-results":"open-cli coverage/lcov-report/index.html","_rimraf-artifacts":"rimraf artifacts","_test-with-coverage":"npm run test -- --coverage","_typescript":"tsc --noEmit","_webpack-build-main":"cross-env TS_NODE_PROJECT=\'webpack/tsconfig.json\' webpack --config webpack/webpack.main.config.ts","_webpack-build-renderer":"cross-env TS_NODE_PROJECT=\'webpack/tsconfig.json\' webpack --config webpack/webpack.renderer.config.ts","_webpack-server":"cross-env TS_NODE_PROJECT=\'webpack/tsconfig.json\' webpack-dev-server --config webpack/webpack.renderer.dev.config.ts"},"devDependencies":{"@actions/artifact":"^0.3.0","@actions/core":"^1.2.3","@actions/exec":"^1.0.3","@actions/github":"^2.1.1","@babel/core":"^7.8.3","@babel/plugin-proposal-class-properties":"^7.8.3","@babel/plugin-proposal-nullish-coalescing-operator":"^7.8.3","@babel/plugin-proposal-optional-chaining":"^7.8.3","@babel/preset-env":"^7.8.3","@babel/preset-react":"^7.8.3","@babel/preset-typescript":"^7.8.3","@hh.ru/babel-plugin-react-displayname":"0.5.3","@hot-loader/react-dom":"^16.11.0","@material-ui/core":"^4.9.11","@material-ui/icons":"^4.5.1","@testing-library/jest-dom":"^5.5.0","@testing-library/react":"^9.5.0","@testing-library/user-event":"^10.1.0","@types/archiver":"^3.1.0","@types/bluebird":"^3.5.29","@types/copy-webpack-plugin":"^5.0.1","@types/electron-devtools-installer":"^2.2.0","@types/fs-extra":"^8.1.0","@types/html-webpack-plugin":"^3.2.3","@types/jest":"^25.1.1","@types/lodash":"^4.14.149","@types/react":"^16.9.19","@types/react-dom":"^16.9.5","@types/react-redux":"^7.1.7","@types/react-router-dom":"^5.1.3","@types/react-virtualized-auto-sizer":"^1.0.0","@types/react-window":"^1.8.1","@types/shelljs":"^0.8.7","@types/testing-library__jest-dom":"^5.0.3","@types/webpack":"^4.41.13","@types/webpack-dev-server":"^3.11.0","@types/webpack-merge":"^4.1.5","@types/webpack-node-externals":"^1.7.1","@types/yup":"^0.26.37","@typescript-eslint/eslint-plugin":"^2.18.0","@typescript-eslint/parser":"^2.18.0","archiver":"^3.1.1","babel-loader":"^8.0.6","babel-plugin-lodash":"^3.3.4","babel-plugin-transform-es2015-modules-commonjs":"^6.26.2","copy-webpack-plugin":"^5.1.1","cross-env":"^7.0.2","css-loader":"^3.4.2","depcheck":"^0.9.2","electron-devtools-installer":"^2.2.4","electron-packager":"^14.2.1","electron-winstaller":"^4.0.0","eslint":"^6.8.0","eslint-config-airbnb":"^18.0.1","eslint-config-prettier":"^6.9.0","eslint-import-resolver-typescript":"^2.0.0","eslint-plugin-import":"^2.20.0","eslint-plugin-jest":"^23.6.0","eslint-plugin-jsx-a11y":"^6.2.3","eslint-plugin-react":"^7.18.0","eslint-plugin-react-hooks":"^1.7.0","file-loader":"^5.0.2","formik":"^2.1.4","fs-extra":"^9.0.0","html-webpack-plugin":"^3.2.0","husky":"^3.1.0","jest":"^25.1.0","js-yaml":"^3.13.1","lint-staged":"^9.5.0","memfs":"^3.0.5","nock":"^11.8.2","npm-run-all":"^4.1.5","open-cli":"^6.0.1","prettier":"1.19.1","react-hot-loader":"^4.12.19","shelljs":"^0.8.3","source-map-loader":"^0.2.4","style-loader":"^1.1.3","ts-jest":"^25.2.0","ts-node":"^8.10.1","tsconfig-paths":"^3.9.0","tsconfig-paths-webpack-plugin":"^3.2.0","typeface-roboto":"0.0.75","typescript":"^3.7.5","wait-for-expect":"^3.0.2","webpack":"^4.41.5","webpack-cli":"^3.3.10","webpack-dev-server":"^3.11.0","webpack-merge":"^4.2.2","webpack-node-externals":"^1.7.2"},"dependencies":{"@material-ui/lab":"^4.0.0-alpha.50","bluebird":"^3.7.2","clsx":"^1.0.4","electron":"^8.2.4","lodash":"^4.17.15","moment":"^2.24.0","react":"^16.12.0","react-dom":"^16.12.0","react-redux":"^7.1.3","react-router-dom":"^5.1.2","react-virtualized-auto-sizer":"^1.0.2","react-window":"^1.8.5","redux":"^4.0.5","redux-thunk":"^2.3.0","typesafe-actions":"^5.1.0","yup":"^0.28.4"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"lint-staged":{"*.{ts,tsx,js,json,md}":["prettier --write","git add"]}}')},function(e,t){e.exports=require("shelljs")},function(e,t){e.exports=require("electron-packager")},function(e,t){e.exports=require("archiver")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("electron-winstaller")},function(e,t){e.exports=require("@actions/exec")},function(e,t,r){"use strict";r.r(t);var a=r(0),n=r(3),o=r.n(n),c=r(4),i=r(2),s=r.n(i),l=r(7),p=r(8),u=r(9),d=r(10),b=r(1),g=r(11),f=r(6),m=r.n(f);const w=!!process.env.GITHUB_ACTIONS,v=async(e,t)=>{w?await Object(g.exec)(e,null,{ignoreReturnCode:!0})>0&&a.setFailed(t):m.a.exec(e).code>0&&m.a.exit(1)},k=/^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/,h=e=>k.test(e),y=()=>{if(w){const e=(()=>{const e=b.context.ref;return e.substr("refs/tags/".length,e.length)})();return h(e)?e:`0.0.0-build.${b.context.sha.substr(0,7)}`}return"0.0.0-localbuild.1"};var x=r(5);const _=c.create(),j=y(),{productName:E}=x,N={darwin:{archiveName:`${E}-v${j}-macOS.zip`},linux:{archiveName:`${E}-v${j}-Linux.zip`},win32:{archiveName:`${E}-v${j}-Windows.exe`}},O=async()=>{console.log("Building source code..."),await v("npm run build","`npm run build` failed");const e=process.platform,{archiveName:t}=N[e];console.log(`Creating Electron package on ${e}...`),await l({arch:"x64",dir:"artifacts/webpack",out:"artifacts/electronPackager",icon:"src/assets/orange",overwrite:!0,platform:e,prune:!1,appVersion:y()}),"darwin"===e?(console.log("Compressing Electron package..."),await new Promise(r=>{const n=p("zip",{zlib:{level:9}}),o=s.a.createWriteStream(`artifacts/electronPackager/${t}`);n.pipe(o),n.directory(`artifacts/electronPackager/${E}-${e}-x64/`,!1),o.on("close",r),n.on("error",t=>{console.error(t),a.setFailed(`Could not create a zip archive on ${e}`)}),n.finalize()})):"win32"===e&&(console.log(`Creating ${t}...`),await d.createWindowsInstaller({appDirectory:`artifacts/electronPackager/${E}-${e}-x64`,outputDirectory:"artifacts/electronPackager",authors:"https://github.com/orange-org",exe:`${E}.exe`,setupExe:t,version:j,name:E,title:E,iconUrl:"https://raw.githubusercontent.com/orange-org/orange/master/src/assets/orange.ico",setupIcon:"src/assets/orange.ico"})),w&&(console.log(`Uploading ${t}...`),await _.uploadArtifact(Object(u.basename)(t),[`artifacts/electronPackager/${t}`],"artifacts/electronPackager"))};"createExecutable"===process.env.FILENAME&&o.a.try(O).catch(console.error);n.try(async()=>{const e=a.getInput("command");if(e)return await v(e,`\`${e}\` failed!`);const t=a.getInput("task");return"create-executable"===t?await O():"draft-release"===t?await(async()=>{const e=new b.GitHub(a.getInput("githubToken")),{owner:t,repo:r}=b.context.repo,n=y();if(!h(n))return void a.setFailed(`Version ${n} is not a valid semantic version.`);console.log("Creating GitHub release...");const o=await e.repos.createRelease({owner:t,repo:r,tag_name:n,name:`${x.productName} v${n}`,draft:!0}),{data:{upload_url:i}}=o,l=c.create();console.log("Downloading build artifacts...");const p=await l.downloadAllArtifacts();for(let t of p){const{downloadPath:r,artifactName:a}=t,n=`${r}/${a}`;console.log(`Uploading release asset ${a}...`),await e.repos.uploadReleaseAsset({url:i,headers:{"content-type":"application/zip","content-length":s.a.statSync(n).size},name:a,file:s.a.readFileSync(n)})}})():void 0}).catch(e=>a.setFailed(e.toString()))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,